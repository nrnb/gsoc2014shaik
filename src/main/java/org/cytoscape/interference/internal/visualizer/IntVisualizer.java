package org.cytoscape.interference.internal.visualizer;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JPanel;

import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.interference.internal.Core;
import org.cytoscape.interference.internal.centralities.Centrality;
import org.cytoscape.interference.internal.centralities.NodeCentrality;
import org.cytoscape.model.CyEdge;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyNode;
import org.cytoscape.model.CyTable;
import org.cytoscape.view.model.CyNetworkView;

/**
 *
 * @author faizaan.shaik
 */
public class IntVisualizer extends javax.swing.JPanel implements Observer, CytoPanelComponent {

    private BoxLayout CentralitiesSelectorLayout;
    public CyNetwork currentnetwork;
    public CyNetworkView currentview;
    public List<Centrality> centralities;
    // centralities panels vector generated by centralities
    private Vector<IntPanel> centralityPanels;
    private Core centiscapecore;
    // visual options panel
    private IntVisualOptions vo;
    private boolean firstTime;

    /**
     * Creates new form CentVisualizer
     */
    public IntVisualizer(CyApplicationManager cyApplicationManager, Core centiscapecore) {
        initComponents();
        //System.out.println("visualizer 1.5 backporting on");
        this.centiscapecore = centiscapecore;
        firstTime = true;
        currentnetwork = cyApplicationManager.getCurrentNetwork();
        currentview = cyApplicationManager.getCurrentNetworkView();
        CentralitiesSelectorLayout = null;
    }

    // detach event listening IntPanel objects from CentralitySelector
    // and remove them from centralities selector
    private void detachCentralitiesSelector() {
        for (IntPanel cp : centralityPanels) {
            cp.notifier.deleteObservers();
            CentralitiesSelector.remove(cp);
        }
        CentralitiesSelector.removeAll(); // remove other components without attachment
    }

    public void setEnabled(List<Centrality> vc) {
        super.setVisible(false);

        if (firstTime) {
            // set the layout for visualizing panels in box mode
            CentralitiesSelectorLayout = new BoxLayout(CentralitiesSelector, BoxLayout.Y_AXIS);
            CentralitiesSelector.setLayout(CentralitiesSelectorLayout);
            firstTime = false;
            // prima erano nel costruttore
            centralities = vc;
            vo = new IntVisualOptions(currentview, centralities);
            vo.addObserver(this);
        } else {
            // remove old centrality panels
            detachCentralitiesSelector();
        }
        // centrality passed
        // create opportune centrality panel
        updateCentralityPanels(centralities);
        // AND / OR options panel
        addOptionsPanel(vo);

        super.setVisible(true);
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
        }

        updateSelection();
    }

    // one observed slider has been moved => update view
    public void update(Observable o, Object arg) {
        IntPanel cp = (IntPanel) arg;
        updateSelection();
    }

    private void updateSelection() {
        CyTable nodecytable = currentnetwork.getDefaultNodeTable();
        ArrayList<CyNode> selYes = new ArrayList();
        ArrayList<CyNode> selNo = new ArrayList();
        for (CyNode elem : currentnetwork.getNodeList()) {
            if (isASelectedNode(elem)) {
                selYes.add(elem);
                //System.out.println("setto a vero il nodo " + elem.getSUID());
                nodecytable.getRow(elem.getSUID()).set("selected", true);
            } else {
                selNo.add(elem);
                nodecytable.getRow(elem.getSUID()).set("selected", false);
            }

            currentview.updateView();
        }
        // update the network selection by using threasold value
        CyTable edgecytable = currentnetwork.getDefaultEdgeTable();
        ArrayList<CyEdge> selEdgeYes = new ArrayList();
        ArrayList<CyEdge> selEdgeNo = new ArrayList();
        for (CyEdge edge : currentnetwork.getEdgeList()) {
            if (isASelectedEdge(edge)) {
                selEdgeYes.add(edge);
                edgecytable.getRow(edge.getSUID()).set("selected", true);
            } else {
                selEdgeNo.add(edge);
                edgecytable.getRow(edge.getSUID()).set("selected", false);
            }
            currentview.updateView();
        }

        /////RISISTEMARE
        //   Cytoscape.getCurrentNetwork().setSelectedNodeState(selYes, true);
        //   Cytoscape.getCurrentNetwork().setSelectedNodeState(selNo, false);
        //   Cytoscape.getCurrentNetworkView().redrawGraph(true, true);
    }

    // say true if c satisfies every threshold requests and filter requests
    private boolean isASelectedNode(CyNode c) {
        boolean res = true;
        boolean finished = false;
        boolean isAnd = vo.isAnd;
        CyTable nodetable = currentnetwork.getDefaultNodeTable();
        for (IntPanel cp : centralityPanels) {
            if (finished) {
                break;
            }

            if (cp.cent instanceof NodeCentrality) {
                try {
                    //System.out.println("in Node section = " + cp.cent.getName());
                    if (cp.isActive) {
                        if (isAnd) {
                            if (cp.minor) {
                                // less than threshold wanted
                                //System.out.println("cp cent getname = " + cp.cent.getName());
                                if (nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) > cp.threshold) {
                                    res = false;
                                    finished = true;
                                }
                            } else {
                                // more than threshold wanted
                                if (nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) < cp.threshold) {
                                    res = false;
                                    finished = true;
                                }
                            }
                        } // OR semantic
                        else {
                            res = false;
                            if (cp.minor) {
                                // less than threshold wanted:if AT LEAST one is ok => stop evaluating and say OK!
                                if (nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) <= cp.threshold) {
                                    res = true;
                                    finished = true;
                                }
                            } else {
                                // more than threshold wanted
                                if (nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) >= cp.threshold) {
                                    res = true;
                                    finished = true;
                                }
                            }
                        }
                    }
                } catch (NullPointerException e) {
                    finished = true;
                    return false;
                }
            }
        }
        return res;
    }

    // say true if c satisfies every threshold requests and filter requests
    private boolean isASelectedEdge(CyEdge c) {
        boolean res = false;
        boolean finished = false;
        boolean isAnd = vo.isAnd;
        CyTable edgetable = currentnetwork.getDefaultEdgeTable();
        for (IntPanel cp : centralityPanels) {
            if (finished) {
                break;
            }
                try {
                if (cp.isActive) {
                    if (isAnd) {
                        res = true;
                        if (cp.minor) {
                            // less than threshold wanted
                            if (edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) > cp.threshold) {
                                res = false;
                                finished = true;
                            }
                        } else {
                            // more than threshold wanted
                            if (edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) < cp.threshold) {
                                res = false;
                                finished = true;
                            }
                        }
                    } // OR semantic
                    else {
                        res = false;
                        if (cp.minor) {
                            // less than threshold wanted:if AT LEAST one is ok => stop evaluating and say OK!
                            if (edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) <= cp.threshold) {
                                //    (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) <= cp.threshold) {
                                res = true;
                                finished = true;
                            }
                        } else {
                            // more than threshold wanted
                            if (edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) >= cp.threshold) {
                                //  if (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) >= cp.threshold) {
                                res = true;
                                finished = true;
                            }
                        }
                    }
                }
                } catch (NullPointerException e) {
                    finished = true;
                    return false;
                }
            
        }
        return res;
    }
    // add a centralityPanel to centralitiesSelector

    public void addCentralityPanel(IntPanel cp) {
        cp.setAlignmentX(Component.LEFT_ALIGNMENT);
        CentralitiesSelector.add(cp);
        centralityPanels.add(cp);
    }

    // add the AND/OR option panel to centralitiesSelector
    public void addOptionsPanel(JPanel op) {
        op.setAlignmentX(Component.LEFT_ALIGNMENT);
        CentralitiesSelector.add(op);
    }

    public void updateCentralityPanels(List<Centrality> centralities) {
        centralityPanels = new Vector();
        for (Centrality elem : centralities) {
            System.out.println("elem aggiunto " + elem.getName());
            IntPanel cp = IntPanelFactory.allocateCentralityPanel(this, elem);
            addCentralityPanel(cp);
        }
        // also update combo boxes...
        vo.loadCentralities(centralities);
        vo.loadNodesList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        CentralitiesSelector = new javax.swing.JPanel();
        ExitButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(500, 698));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(480, 686));

        CentralitiesSelector.setMaximumSize(new java.awt.Dimension(568, 32767));

        ExitButton.setText("Close Result Panel");
        ExitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitButtonMouseClicked(evt);
            }
        });

        jSeparator3.setMaximumSize(new java.awt.Dimension(0, 2));

        org.jdesktop.layout.GroupLayout CentralitiesSelectorLayout = new org.jdesktop.layout.GroupLayout(CentralitiesSelector);
        CentralitiesSelector.setLayout(CentralitiesSelectorLayout);
        CentralitiesSelectorLayout.setHorizontalGroup(
            CentralitiesSelectorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CentralitiesSelectorLayout.createSequentialGroup()
                .add(200, 200, 200)
                .add(ExitButton)
                .addContainerGap(202, Short.MAX_VALUE))
            .add(jSeparator3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CentralitiesSelectorLayout.setVerticalGroup(
            CentralitiesSelectorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CentralitiesSelectorLayout.createSequentialGroup()
                .add(ExitButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 11, Short.MAX_VALUE)
                .addContainerGap(641, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(CentralitiesSelector);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void ExitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitButtonMouseClicked
            centiscapecore.closeCurrentResultPanel(this);
            // TODO add your handling code here:
	}//GEN-LAST:event_ExitButtonMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CentralitiesSelector;
    private javax.swing.JButton ExitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables

    public Component getComponent() {
        return this;
    }

    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.EAST;
    }

    public String getTitle() {
        return "CentiScaPe Results";
    }

    public Icon getIcon() {
        return null;
    }
}